class Snake {
	field int squareCount;
	field int squareSize; 
	
	field int x;
	field int y;
	
	
	field int direction;
	
	
	field Array squareArray;
	
	field int head;
	field int tail;
	
	constructor Snake new(int nx, int ny, int nsquareCount, int nsquareSize) {
		var int i;
	
		let x = nx;
		let y= ny;
		let squareCount = nsquareCount;
		let squareSize = nsquareSize;
		let head = 0;
		let tail = squareCount - 1;
		
		let squareArray = Array.new(squareCount);
		let i = 0;
		

		while(i < squareCount) {
			let squareArray[i] = Square.new(x + (squareCount -1 - i) * squareSize, y, squareSize);
			let i = i + 1;
		}
		
		return this;
	}
	
	method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
	

    method void moveUp() {
		var Square headSquare;
		var Square tailSquare;
		
		let headSquare = squareArray[head];
		let tailSquare = squareArray[tail];
		do tailSquare.erase();
		do tailSquare.setX(headSquare.getX());
		if (headSquare.getY() > (squareSize - 1)) {
			do tailSquare.setY(headSquare.getY() - squareSize);
		} else {
			do tailSquare.setY(252 - squareSize);
		}
		do tailSquare.draw();
		do caculateHead();
		do caculateTail();
        return;
    }


    method void moveDown() {
		var Square headSquare;
		var Square tailSquare;
		
		let headSquare = squareArray[head];
		let tailSquare = squareArray[tail];
		do tailSquare.erase();
		do tailSquare.setX(headSquare.getX());
		if ((headSquare.getY() + (2 * squareSize)) < 256) { 
			do tailSquare.setY(headSquare.getY() + squareSize);
		} else {
			do tailSquare.setY(0);
		}
		do tailSquare.draw();
		do caculateHead();
		do caculateTail();
        return;
    }


    method void moveLeft() {
        var Square headSquare;
		var Square tailSquare;
		
		let headSquare = squareArray[head];
		let tailSquare = squareArray[tail];
		do tailSquare.erase();
		if (headSquare.getX() > (squareSize - 1)) {
			do tailSquare.setX(headSquare.getX() - squareSize);
		} else {
			do tailSquare.setX(508 - squareSize);
		}
		do tailSquare.setY(headSquare.getY());
		do tailSquare.draw();
		do caculateHead();
		do caculateTail();
        return;
    }


    method void moveRight() {
		var Square headSquare;
		var Square tailSquare;
		
		let headSquare = squareArray[head];
		let tailSquare = squareArray[tail];
		do tailSquare.erase();
		if ((headSquare.getX() + (2 * squareSize))  < 512) {			
			do tailSquare.setX(headSquare.getX() + squareSize);			
		} else {
			do tailSquare.setX(0);
		}
		do tailSquare.setY(headSquare.getY());
		do tailSquare.draw();
		do caculateHead();
		do caculateTail();
        return;
    }
	
	method void caculateHead() {
		if (head > 0) {
			let head = head - 1;
		} else {
			let head = squareCount - 1;
		}
		return;
	}
	
	method void caculateTail() {
		if (tail > 0) {
			let tail = tail - 1;
		} else {
			let tail = squareCount - 1;
		}
		return;
	}
}